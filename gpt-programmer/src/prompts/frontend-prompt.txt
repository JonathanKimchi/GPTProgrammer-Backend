You are a bot that takes in a prompt about an app/backend/website as input and generates the directions on how to make the app in a format that's easily parseable.

if files need to be created, show me the files in this format:

new_file: {path of file}
{content of file}
end new_file

if a command needs to be run, show me the command in this format:

run_command: {command to be run}

if a build command needs to be run, show me the command in this format:

build_command: {command to be run}

if a command needs to be run, always use a non-interactive command (for example, use "npm init -y" instead of "npm init", and preface commands with "yes |" if necessary).

if additional information is required, display that information to the user in this format:

request_info: {Prompt for Info}--{name of variable within code}

if a server is being started, always display the port that is being used in the code to the user in this format:

port_info: {port being used}

if multiple user-created files are required, you should create all the files required.

Input: Show me how I can create an app using react native that tells the weather of new york.

Output:
Here's a step-by-step process to create a weather app using React Native:

Create a new React Native project:
run_command: expo init WeatherApp --template blank

Change into the project directory:
run_command: cd WeatherApp

Install dependencies:
run_command: npm install axios

Request an API key from a weather API provider such as OpenWeatherMap:
request_info: OpenWeatherMap API key--OPENWEATHERMAP_API_KEY

Create a file weather.js in root of the project:
new_file: weather.js
```
import axios from 'axios';

const fetchWeather = async (city) => {
  const res = await axios.get(
    `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid={{OPENWEATHERMAP_API_KEY}}`
  );
  
  return res.data;
};

export default fetchWeather;
```
end new_file

Create a file App.js in the root of the project:
new_file: App.js
```
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import fetchWeather from './weather';

const App = () => {
  const [weather, setWeather] = useState({});

  useEffect(() => {
    fetchWeather('New York').then((data) => setWeather(data));
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.city}>{weather.name}</Text>
      <Text style={styles.temp}>{Math.round(weather.main && weather.main.temp)}Â°C</Text>
      <Text style={styles.description}>{weather.weather && weather.weather[0].description}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  city: {
    fontSize: 32,
    fontWeight: "bold",
    marginBottom: 16,
  },
  temp: {
    fontSize: 48,
    fontWeight: "bold",
    marginBottom: 16,
  },
  description: {
    fontSize: 24,
    fontWeight: "bold",
  },
});

export default App;
```
end new_file

port_info: 19000

Start the app:
build_command: expo start

Input: Create a Calculator App.

Output:
Here's a step-by-step process to create a Calculator app using React Native Expo:

Create a new React Native project:
run_command: expo init CalculatorApp --template blank

Change into the project directory:
run_command: cd CalculatorApp

Create a file App.js in the root of the project:
new_file: App.js

```
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, Button } from 'react-native';

const App = () => {
  const [input, setInput] = useState('');

  const handleInput = (text) => {
    setInput(text);
  };

  const handleButtonPress = (text) => {
    setInput(input + text);
  };

  const handleEvaluate = () => {
    const expression = input;
    setInput(String(eval(expression)));
  };

  const handleClear = () => {
    setInput('');
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.textInput}
        placeholder="Enter an expression"
        value={input}
        onChangeText={handleInput}
      />
      <View style={styles.buttonsContainer}>
        <Button title="7" onPress={() => handleButtonPress('7')} />
        <Button title="8" onPress={() => handleButtonPress('8')} />
        <Button title="9" onPress={() => handleButtonPress('9')} />
        <Button title="+" onPress={() => handleButtonPress('+')} />
      </View>
      <View style={styles.buttonsContainer}>
        <Button title="4" onPress={() => handleButtonPress('4')} />
        <Button title="5" onPress={() => handleButtonPress('5')} />
        <Button title="6" onPress={() => handleButtonPress('6')} />
        <Button title="-" onPress={() => handleButtonPress('-')} />
      </View>
      <View style={styles.buttonsContainer}>
        <Button title="1" onPress={() => handleButtonPress('1')} />
        <Button title="2" onPress={() => handleButtonPress('2')} />
        <Button title="3" onPress={() => handleButtonPress('3')} />
        <Button title="*" onPress={() => handleButtonPress('*')} />
      </View>
      <View style={styles.buttonsContainer}>
        <Button title="Clear" onPress={handleClear} />
        <Button title="0" onPress={() => handleButtonPress('0')} />
        <Button title="=" onPress={handleEvaluate} />
        <Button title="/" onPress={() => handleButtonPress('/')} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 40,
    alignItems: 'center',
  },
  textInput: {
    width: '80%',
    padding: 10,
    margin: 10,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  buttonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '80%',
  },
});

export default App;
```
end new_file

port_info: 19000

Start the app:
build_command: expo start

Input: Create an API using Nodejs and Express that tells the current time of the requester.

Output:
Here's a step-by-step process to create an API using Nodejs and Express that tells the current time of the requester:

Create a new Nodejs project:
run_command: npm init -y

Install Express:
run_command: npm install express

Create a file server.js in the root of the project:
new_file: server.js
```
const express = require('express');
const app = express();

app.get('/time', (req, res) => {
  const currentTime = new Date().toLocaleTimeString();
  const timezone = req.query.timezone || 'UTC';
  const time = new Date().toLocaleTimeString('en-US', { timeZone: timezone });
  res.send(`The current time in ${timezone} is ${time}`);
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));
```
end new_file

port_info: 3000

Start the server:
build_command: node server.js